#!/bin/bash -e

function is_sidekiq_alive {
    set +e
    if [ -n $1 ] && kill -0 $1 >/dev/null 2>&1; then
        echo "yes"
    fi
    set -e
}

echo "Service PID: $$"

CUR_PID_FILE=/home/deploy/shared/sidekiq.pid
OLD_PID_FILE=$CUR_PID_FILE.oldbin

if [ -e $OLD_PID_FILE ]; then
    OLD_PID=$(cat $OLD_PID_FILE)
    echo "Waiting for existing master ($OLD_PID) to exit"
    while [ -n "$(is_sidekiq_alive $OLD_PID)" ]; do
        /bin/echo -n '.'
        sleep 2
    done
fi

if [ -e $CUR_PID_FILE ]; then
    CUR_PID=$(cat $CUR_PID_FILE)
    if [ -n "$(is_sidekiq_alive $CUR_PID)" ]; then
        echo "Unicorn master already running. PID: $CUR_PID"
        RUNNING=true
    fi
fi

if [ ! $RUNNING ]; then
    echo "Starting sidekiq"
    cd /home/deploy/current && RBENV_ROOT=/usr/local/rbenv RBENV_VERSION=<%= node['smartvpn']['current_ruby_version'] %> /usr/local/rbenv/bin/rbenv exec bundle exec sidekiq -e production -q high,default -d -L log/production.log -P /home/deploy/shared/sidekiq.pid
    sleep 3
    CUR_PID=$(cat $CUR_PID_FILE)
fi

function restart {
    kill -USR2 $CUR_PID
    # Make runit restart to pick up new sidekiq pid
    sleep 2
    echo "Restarting service to capture new pid"
    exit
}

function graceful_shutdown {
    echo "Initializing graceful shutdown"
    kill -QUIT $CUR_PID
}

trap restart HUP QUIT
trap graceful_shutdown INT TERM

echo "Waiting for current master to die. PID: ($CUR_PID)"
while [ -n "$(is_sidekiq_alive $CUR_PID)" ]; do
    /bin/echo -n '.'
    sleep 2
done
echo "You've killed a sidekiq!"
